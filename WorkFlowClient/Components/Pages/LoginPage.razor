@page "/login"
@using Domain.DataTransfareObject
@using WorkFlowClient.Services.Interfaces
@inject NavigationManager Nav
@inject IUserService _userservice
@inject WorkFlowClient.Services.Class.LangState Lang

<div class="login-page">
    <div class="login-card">
        <h2>@Lang.T("otpLogin")</h2>

        @if (!IsCodeSent)
        {
            <p class="subtitle">@Lang.T("otpSubtitle")</p>

            <div class="form-group">
                <label>@Lang.T("otpCountry")</label>
                <select @bind="SelectedCountry">
                    <option value="+970">@Lang.T("ws")</option>
                    <option value="+972">@Lang.T("il")</option>
                    <option value="+962">@Lang.T("jo")</option>
                </select>
            </div>

            <div class="form-group">
                <label>@Lang.T("otpUsername")</label>
                <input type="text" @bind="username" placeholder="User Name" />
            </div>

            <div class="form-group">
                <label>@Lang.T("otpPhone")</label>
                <input type="tel" @bind="PhoneNumber" placeholder="5XXXXXXXX" />
            </div>

            <button class="btn-login" @onclick="SendCode" disabled="@IsSending">
                @(IsSending? Lang.T("otpSending") : Lang.T("otpSend"))
            </button>
        }
        else
        {
            <p class="subtitle">@string.Format(Lang.T("otpSentTo"), SelectedCountry, PhoneNumber)</p>

            <div class="form-group">
                <label>@Lang.T("otpCode")</label>
                <input type="text" maxlength="6" @bind="OtpCode" placeholder="XXXXXX" />
            </div>

            <button class="btn-login" @onclick="VerifyCode" disabled="@IsVerifying">
                @(IsVerifying? Lang.T("otpVerifying") : Lang.T("otpConfirm"))
            </button>

            <div class="resend-box">
                @if (CanResend)
                {
                    <button class="btn-resend" @onclick="SendCode">@Lang.T("otpResend")</button>
                }
                else
                {
                    <span>@string.Format(Lang.T("otpResendAfter"), RemainingSeconds)</span>
                }
            </div>
        }
    </div>
</div>

@code {
    private string PhoneNumber { get; set; } = "";
    private string SelectedCountry { get; set; } = "+970"; // default الضفة
    private string OtpCode { get; set; } = "";

    private string username = "";
    private bool IsCodeSent = false;
    private bool IsSending = false;
    private bool IsVerifying = false;

    private bool CanResend = false;
    private int RemainingSeconds = 60;
    private System.Timers.Timer? CountdownTimer;

    private async Task SendCode()
    {
        if (string.IsNullOrWhiteSpace(PhoneNumber)) return;
        IsSending = true;

        var res = await _userservice.SendVerfyCode(new SendVerfyCodeDto
        {
            PhonNumber = PhoneNumber,
            ContryCode = SelectedCountry
            ,
            UserName = username
        });

        IsSending = false;
        if (res.IsSucceeded && res.Value)
        {
            IsCodeSent = true;
            StartCountdown();
        }
    }

    private async Task VerifyCode()
    {
        if (string.IsNullOrWhiteSpace(OtpCode)) return;
        IsVerifying = true;

        var res = await _userservice.CheckCode(new CheckVerfyCode
        {
            PhonNumber = PhoneNumber,
            Code = OtpCode
        });

        IsVerifying = false;
        if (res.IsSucceeded && res.Value)
        {
            await SecureStorage.SetAsync("userPhone", PhoneNumber);
            Nav.NavigateTo("/", true);
        }
    }

    private void StartCountdown()
    {
        RemainingSeconds = 60;
        CanResend = false;

        CountdownTimer?.Dispose();
        CountdownTimer = new System.Timers.Timer(1000);
        CountdownTimer.Elapsed += (s, e) =>
        {
            if (RemainingSeconds > 0)
            {
                RemainingSeconds--;
                InvokeAsync(StateHasChanged);
            }
            else
            {
                CanResend = true;
                CountdownTimer.Stop();
                InvokeAsync(StateHasChanged);
            }
        };
        CountdownTimer.Start();
    }
}
