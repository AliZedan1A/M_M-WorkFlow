@using Domain.Databases
@using Domain.DataTransfareObject
@using System.Globalization
@using WorkFlowClient.Services.Interfaces
@inject IShiftService _shiftservice
@inject IUserService _userservice
@inject HttpClient Http

<div class="shifts-requests">
    <h3>طلبات الشفتات</h3>

    @if (isLoading)
    {
        <p>⏳ جاري تحميل الشفتات...</p>
    }
    else if (PendingShifts?.Any() != true)
    {
        <p class="empty">لا يوجد شفتات بانتظار الموافقة.</p>
    }
    else
    {
        <div class="shift-list">
            @if (UserId != null)
            {
                <h3 class="empty">@PendingShifts.Where(x=>x.ShiftStatus == ShiftStatus.Acepted).Count() عدد الشفتات المقبولة</h3>
            }
            @foreach (var shift in PendingShifts)
            {
                var isSuspicious = shift.StartTime.Date != shift.EndTime.Date;

                <div class="shift-card @(isSuspicious ? "suspicious" : "")">
                    <div class="shift-header">
                        <strong>@shift.User?.Name</strong>
                        <span class="phone">رقم الهاتف :  @shift.User?.PhonNumber</span>
                    </div>

                    <div class="shift-body">
                        <div class="shift-info">
                            <p>🕒 <b>البدء:</b> @shift.StartTime.ToString("dd/MM/yyyy HH:mm")</p>
                            <p>🕒 <b>الانتهاء:</b> @shift.EndTime.ToString("dd/MM/yyyy HH:mm")</p>
                        </div>

                        <div class="shift-media">
                            <!-- صورة الإثبات -->
                            <img src="@($"https://10.0.0.9:7246/api/Shift/ShiftImage/{shift.Id}")"
                                 alt="إثبات الشيفت"
                                 style="max-width:300px; max-height:300px; border-radius:8px; object-fit:contain;" />
                            @if (shift.Latitude != 0 && shift.Longitude != 0)
                            {
                            <iframe width="100%"
                                    height="200"
                                    style="border:0"
                                    allowfullscreen=""
                                    loading="lazy"
                                    src=@($"https://www.google.com/maps/embed/v1/view?key=AIzaSyBz8x28heKHno88pp3LYjWspQ2N0zwS40c&center={shift.Latitude.ToString(CultureInfo.InvariantCulture)},{shift.Longitude.ToString(CultureInfo.InvariantCulture)}&zoom=15&maptype=roadmap")>
                            </iframe>
                            }
                        </div>
                    </div>

                    @if(UserId!=null)
                    {
                        <select @onchange="e => ChangeShiftStatus(shift.Id, e.Value?.ToString())"
                                value="@shift.ShiftStatus.ToString()">
                            @foreach (var status in Enum.GetValues<ShiftStatus>())
                            {
                                <option value="@status" selected="@(status == shift.ShiftStatus)">
                                    @status
                                </option>
                            }
                        </select>
                        <h3 class="empty">@shift.ShiftStatus</h3>
                    }
                    else
                    {
                        <div class="shift-actions">
                            <button class="btn accept" @onclick="() => ChangeStatus(shift.Id, ShiftStatus.Acepted)">قبول</button>
                            <button class="btn reject" @onclick="() => ChangeStatus(shift.Id, ShiftStatus.referd)">رفض</button>
                        </div>
                    }
                  
                </div>
            }
        </div>
    }
</div>

@code {
    [Parameter]
    public int? UserId { get; set; }
    private List<shiftModel> PendingShifts = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        if(UserId!=null)
        {
            var rslt = await _shiftservice.GetUserShiftsAsync(UserId.Value);
            if(rslt.IsSucceeded)
            {
                foreach (var shift in rslt.Value)
                {
                    var userRes = await _userservice.GetUserByIdAsync(shift.UserId);
                    if (userRes.IsSucceeded)
                        shift.User = userRes.Value;
                }
                PendingShifts = rslt.Value;

            }
        }
        else
        {


            var res = await _shiftservice.GetAllShiftsAsync();
            if (res.IsSucceeded && res.Value != null)
            {
                var all = res.Value
                    .Where(s => s.ShiftStatus == ShiftStatus.pending && s.Latitude != 0 && s.Longitude != 0)
                    .ToList();

                // جلب معلومات المستخدم لكل شفت
                foreach (var shift in all)
                {
                    var userRes = await _userservice.GetUserByIdAsync(shift.UserId);
                    if (userRes.IsSucceeded)
                        shift.User = userRes.Value;
                }

                PendingShifts = all;
            }
        }
        isLoading = false;
    }

    private async Task ChangeStatus(int shiftId, ShiftStatus status)
    {
        var res = await _shiftservice.ModfiyStatusAsync(new ModfiyShiftStatusDto
        {
            ShiftId = shiftId,
            NewStatus = status
        });

        if (res.IsSucceeded)
        {
            PendingShifts = PendingShifts.Where(s => s.Id != shiftId).ToList();
            StateHasChanged();
        }
    }
    private async Task ChangeShiftStatus(int shiftid, string? newStatusStr)
    {
        if (Enum.TryParse<ShiftStatus>(newStatusStr, out var newStatus))
        {
           

            var res = await _shiftservice.ModfiyStatusAsync(new()
            {
                NewStatus = newStatus
                ,ShiftId = shiftid
            });
            if (res.IsSucceeded)
            {
                var shift = PendingShifts?.FirstOrDefault(u => u.Id == shiftid);
                if (shift != null) shift.ShiftStatus = newStatus;
                StateHasChanged();
            }
        }
    }
}
<style>
    select {
        padding: 10px 14px;
        border: 1px solid #444;
        border-radius: 12px;
        background: #1e1e1e;
        color: #fff;
        font-size: 15px;
        font-family: inherit;
        outline: none;
        cursor: pointer;
        transition: all 0.3s ease;
        min-width: 160px;
    }

        select:hover {
            border-color: #666;
            background: #2a2a2a;
        }

        select:focus {
            border-color: #4a90e2;
            box-shadow: 0 0 6px rgba(74, 144, 226, 0.6);
        }

        select option {
            background: #1e1e1e;
            color: #fff;
            padding: 8px;
        }

            select option:checked {
                background: #4a90e2;
                color: #fff;
            }
</style>